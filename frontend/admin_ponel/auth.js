// auth.js
const API_CONFIG = {
    BASE_URL: 'http://localhost:8080/api/v1',
    ENDPOINTS: {
        ADMIN: {
            LOGIN: '/admin/login',
            VERIFY: '/admin/verify',
            DASHBOARD: '/admin/dashboard',
            USERS: '/admin/users'
        }
    }
};

class AuthService {
    constructor() {
        this.token = localStorage.getItem('adminToken');
        this.adminData = JSON.parse(localStorage.getItem('adminData')) || null;
    }

    async login(username, password) {
        try {
            console.log('üîê Attempting login for:', username);
            
            const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ADMIN.LOGIN}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password })
            });

            if (!response.ok) {
                throw new Error('Login failed');
            }

            const data = await response.json();
            console.log('‚úÖ Login response received');
            console.log('üìè Token length from server:', data.token.length);
            console.log('üîê Token from server (first 50):', data.token.substring(0, 50));
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞ –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const parts = data.token.split('.');
            console.log('üìã Token parts from server:', parts.length);
            console.log('üìè Part lengths from server:', parts.map(p => p.length));
            
            this.token = data.token;
            this.adminData = data.admin;
            
            localStorage.setItem('adminToken', data.token);
            localStorage.setItem('adminData', JSON.stringify(data.admin));
            
            console.log('‚úÖ Token saved to localStorage');
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            const savedToken = localStorage.getItem('adminToken');
            console.log('üìè Saved token length:', savedToken.length);
            console.log('üîê Saved token (first 50):', savedToken.substring(0, 50));
            
            return data;
        } catch (error) {
            console.error('‚ùå Login error:', error);
            throw error;
        }
    }

    logout() {
        this.token = null;
        this.adminData = null;
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminData');
        this.showLoginModal();
    }

    async verifyToken() {
        if (!this.token) {
            console.log('‚ùå No token available for verification');
            return false;
        }

        try {
            console.log('üîê Verifying token...');
            console.log('üì§ Token being sent:', this.token.substring(0, 20) + '...');
            
            const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.ADMIN.VERIFY}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${this.token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('üì° Verify response status:', response.status);
            console.log('üì° Verify response ok:', response.ok);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.log('‚ùå Verify failed with response:', errorText);
                return false;
            }
            
            console.log('‚úÖ Token verification successful');
            return true;
            
        } catch (error) {
            console.error('‚ùå Token verification failed:', error);
            return false;
        }
    }

    getAuthHeaders() {
        if (!this.token) {
            throw new Error('No token available');
        }
        return {
            'Authorization': `Bearer ${this.token}`,
            'Content-Type': 'application/json'
        };
    }

    isAuthenticated() {
        return !!this.token;
    }

    showLoginModal() {
        document.getElementById('loginModal').style.display = 'flex';
        document.getElementById('adminPanel').style.display = 'none';
    }

    showAdminPanel() {
        document.getElementById('loginModal').style.display = 'none';
        document.getElementById('adminPanel').style.display = 'grid';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.authService = new AuthService();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞
document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('adminLoginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const username = formData.get('username');
            const password = formData.get('password');
            
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            
            try {
                console.log('üîÑ Processing login...');
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –í—Ö–æ–¥...';
                submitBtn.disabled = true;
                
                await window.authService.login(username, password);
                
                console.log('‚úÖ Login successful, reloading page...');
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏
                location.reload();
                
            } catch (error) {
                console.error('‚ùå Login failed:', error);
                alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        if (window.authService.isAuthenticated()) {
            console.log('‚úÖ User is authenticated, verifying token...');
            window.authService.verifyToken().then(isValid => {
                if (isValid) {
                    console.log('‚úÖ Token is valid, showing admin panel');
                    window.authService.showAdminPanel();
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
                    if (window.initializeAdminPanel) {
                        initializeAdminPanel();
                    }
                } else {
                    console.log('‚ùå Token invalid, showing login');
                    window.authService.showLoginModal();
                }
            });
        } else {
            console.log('‚ùå Not authenticated, showing login modal');
            window.authService.showLoginModal();
        }
    }, 100);
});