// admin.js

// –ü–µ—Ä–µ–Ω–µ—Å–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—é–¥–∞ —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π
window.initializeAdminPanel = async function() {
    try {
        console.log('üöÄ Initializing admin panel...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
        updateAdminInfo();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadInitialData();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        console.log('‚úÖ Admin panel initialized successfully');
        
    } catch (error) {
        console.error('‚ùå Admin panel initialization failed:', error);
    }
};

function updateAdminInfo() {
    const adminNameElement = document.getElementById('adminName');
    if (adminNameElement && window.authService.adminData) {
        adminNameElement.textContent = window.authService.adminData.username;
        console.log('‚úÖ Admin info updated:', window.authService.adminData.username);
    }
}

async function loadInitialData() {
    try {
        console.log('üì• Loading initial data...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        const activeTab = document.querySelector('.tab-content.active');
        if (activeTab) {
            await loadTabData(activeTab.id);
        }
        
    } catch (error) {
        console.error('‚ùå Initial data loading failed:', error);
    }
}

async function loadTabData(tabId) {
    console.log(`üìä Loading data for tab: ${tabId}`);
    
    switch (tabId) {
        case 'dashboard':
            if (window.adminUI) {
                await window.adminUI.updateDashboard();
            }
            break;
        case 'users':
            if (window.adminUI) {
                await window.adminUI.updateUsersTable();
            }
            break;
        default:
            console.log(`‚ÑπÔ∏è No data loader for tab: ${tabId}`);
    }
}
function setupEventListeners() {
    console.log('üîß Setting up event listeners...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    document.querySelectorAll('.menu-item').forEach(item => {
        item.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            console.log(`üéØ Switching to tab: ${tabName}`);
            switchTab(tabName);
        });
    });

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userSearch = document.getElementById('userSearch');
    if (userSearch) {
        userSearch.addEventListener('input', debounce(async function() {
            console.log('üîç User search:', this.value);
            await window.adminUI.updateUsersTable(this.value);
        }, 300));
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userFilter = document.getElementById('userFilter');
    if (userFilter) {
        userFilter.addEventListener('change', async function() {
            console.log('üéõÔ∏è User filter:', this.value);
            await window.adminUI.updateUsersTable('', this.value);
        });
    }

    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function() {
            console.log('üö™ Logging out...');
            window.authService.logout();
        });
    }

    console.log('‚úÖ Event listeners setup complete');
}

// –£—Ç–∏–ª–∏—Ç—ã
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
async function switchTab(tabName) {
    console.log(`üîÑ Switching to tab: ${tabName}`);
    
    document.querySelectorAll('.menu-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });

    const menuItem = document.querySelector(`[data-tab="${tabName}"]`);
    const tabContent = document.getElementById(tabName);
    
    if (menuItem && tabContent) {
        menuItem.classList.add('active');
        tabContent.classList.add('active');
        await loadTabData(tabName);
    } else {
        console.error(`‚ùå Tab elements not found for: ${tabName}`);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML onclick
window.switchTab = switchTab;

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
window.showUserModal = function() {
    alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
};

window.closeUserModal = function() {
    console.log('Close user modal');
};

window.saveUser = function() {
    alert('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
};

window.showTariffModal = function() {
    alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
};

// admin.js
class AdminAPI {
    constructor() {
        // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º authService –∑–¥–µ—Å—å, –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤
    }

    getAuthService() {
        if (!window.authService) {
            throw new Error('AuthService not available');
        }
        return window.authService;
    }

    async getDashboardStats() {
        try {
            console.log('üìä Fetching dashboard stats...');
            
            const response = await fetch(`http://localhost:8080/api/v1/admin/dashboard`, {
                headers: this.getAuthService().getAuthHeaders()
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ Dashboard data:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Dashboard error:', error);
            throw error;
        }
    }

    async getUsers(params = {}) {
        try {
            console.log('üë• Fetching users...', params);
            
            const queryString = new URLSearchParams(params).toString();
            const url = `http://localhost:8080/api/v1/admin/users${queryString ? `?${queryString}` : ''}`;

            const response = await fetch(url, {
                headers: this.getAuthService().getAuthHeaders()
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ Users data:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Users error:', error);
            throw error;
        }
    }
}

class UIManager {
    constructor() {
        this.adminAPI = new AdminAPI();
    }

    async updateDashboard() {
        try {
            console.log('üîÑ Updating dashboard...');
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å authService
            if (!window.authService || !window.authService.getAuthHeaders) {
                throw new Error('AuthService not ready');
            }
            
            const stats = await this.adminAPI.getDashboardStats();
            
            this.updateElement('totalUsers', stats.total_users || 0);
            this.updateElement('totalPayments', stats.total_payments || 0);
            this.updateElement('totalRevenue', `${stats.total_revenue || 0} ‚ÇΩ`);
            this.updateElement('activeTariffs', stats.active_tariffs || 0);
            
            console.log('‚úÖ Dashboard updated successfully');
            
        } catch (error) {
            console.error('‚ùå Dashboard update failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: ' + error.message);
        }
    }

    async updateUsersTable(search = '', filter = 'all', page = 1) {
        try {
            console.log('üîÑ Updating users table...');
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å authService
            if (!window.authService || !window.authService.getAuthHeaders) {
                throw new Error('AuthService not ready');
            }
            
            const params = { search, filter, page, limit: 20 };
            const data = await this.adminAPI.getUsers(params);
            
            this.renderUsersTable(data.users || []);
            console.log('‚úÖ Users table updated successfully');
            
        } catch (error) {
            console.error('‚ùå Users table update failed:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message);
        }
    }

    renderUsersTable(users) {
        const tbody = document.getElementById('usersTable');
        if (!tbody) {
            console.warn('‚ö†Ô∏è usersTable element not found');
            return;
        }

        if (users.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" style="text-align: center; padding: 2rem;">
                        <i class="fas fa-users" style="font-size: 3rem; color: #ccc; margin-bottom: 1rem;"></i>
                        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = users.map(user => `
            <tr>
                <td>${user.id}</td>
                <td>${this.escapeHtml(user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                <td>${this.escapeHtml(user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</td>
                <td>${user.phone || '-'}</td>
                <td>${user.balance || 0} ‚ÇΩ</td>
                <td>${user.tariff_name || '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}</td>
                <td>
                    <span class="status-badge ${user.tariff_id ? 'status-active' : 'status-inactive'}">
                        ${user.tariff_id ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <div class="table-actions">
                        <button class="action-btn edit" onclick="adminUI.editUser(${user.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn view" onclick="adminUI.viewUser(${user.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    updateElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`‚ö†Ô∏è Element #${elementId} not found`);
        }
    }

    showError(message) {
        console.error('üí• UI Error:', message);
        alert(message);
    }

    escapeHtml(unsafe) {
        if (unsafe === null || unsafe === undefined) return '';
        return String(unsafe)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    editUser(userId) {
        console.log('Edit user:', userId);
        alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
    }

    viewUser(userId) {
        console.log('View user:', userId);
        alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.adminUI = new UIManager();